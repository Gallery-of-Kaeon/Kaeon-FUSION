Use: Standard

Define: generate board

	board: List

	i { 1 } Scope

		row: List

		j { 0 } Scope

			Append: Row, Ternary: Less { Random, .1 }, 1, 0

			j: Add: j, 1
			Loop: Less or Equal: j, 10

		Append: board, row

		i: Add: i, 1
		Loop: Less or Equal: i, 10

	Return: board

Define: draw board { board: At: Arguments, 1 }

	draw: ""

	i { 1 } Scope
		
		row: At: board, i

		j { 1 } Scope
			
			cell: At: At { board, i }, j

			draw: Concatenate: draw, Ternary: Equal { cell, 1 }, *, -
			
			j: Add: j, 1
			Loop: Less or Equal: j, Size: At: board, i

		Scope { Break: Greater: i, Subtract: Size { board }, 1 }
			draw: Concatenate: draw, \n

		i: Add: i, 1
		Loop: Less or Equal: i, Size: board

	Return: draw

Define: get neighbors { board { At: Arguments, 1 }, i { At: Arguments, 2 }, j { At: Arguments, 3 } }
	
	sum: 0

	sum { Add: sum, At { At { board, Subtract: i, 1 }, j } } Catch
	sum { Add: sum, At { At { board, Add: i, 1 }, j } } Catch
	sum { Add: sum, At { At { board, i }, Subtract: j, 1 } } Catch
	sum { Add: sum, At { At { board, i }, Add: j, 1 } } Catch
	sum { Add: sum, At { At { board, Subtract: i, 1 }, Subtract: j, 1 } } Catch
	sum { Add: sum, At { At { board, Add: i, 1 }, Subtract: j, 1 } } Catch
	sum { Add: sum, At { At { board, Subtract: i, 1 }, Add: j, 1 } } Catch
	sum { Add: sum, At { At { board, Add: i, 1 }, Add: j, 1 } } Catch

	Return: sum

Define: conway { board: At: Arguments, 1 }

	new board: List

	i { 1 } Scope
		
		row: List

		j { 1 } Scope
			
			neighbors: get neighbors: board, i, j

			Scope { Break: Equal: 1, At: At { board, i }, j }

				Scope { Break: Not: Equal: neighbors, 3 }
					Append: row, 1

				Scope { Break: Equal: neighbors, 3 }
					Append: row, 0

			Scope { Break: Equal: 0, At: At { board, i }, j }

				Scope { Break: Not: Or: Equal { neighbors, 2 }, Equal { neighbors, 3 } }
					Append: row, 1

				Else
					Append: row, 0
			
			j: Add: j, 1
			Loop: Less or Equal: j, Size: At: board, i

		Append: new board, row

		i: Add: i, 1
		Loop: Less or Equal: i, Size: board

	Return: new board
	
Define: main

	board: generate board

	Scope

		Log Line: draw board: board; \n
		board: conway: board

		Wait: .5

		Loop

main