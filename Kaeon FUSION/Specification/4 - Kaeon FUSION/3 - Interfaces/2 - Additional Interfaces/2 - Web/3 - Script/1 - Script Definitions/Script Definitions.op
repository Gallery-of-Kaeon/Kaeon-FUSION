Script Definitions
	
	Overview
		
		-
			When Kaeon FUSION code is cross compiled to Javascript, the user must take into account
			how the code will take effect once cross compiled.
		-
	
	Literals
		
		-
			If a command has no children and its content does not match the name of a declared
			variable, function, or structure, it will be cross compiled as a literal. If the
			literal is not a number, it will automatically be placed in quotation marks.
			
			The literals true and false will be cross compiled to 1 and 0 respectively.
			
			For example:
				
				abc
				123
				true
			
			will be cross compiled to:
				
				"abc"
				123
				1
		-
	
	Variables
		
		-
			Variables may be declared as they normally are in FUSION.
			
			For example:
				
				x: 0
				Global: y: abc
			
			will be cross compiled to:
				
				var x = 0;
				y = "abc";
		-
	
	Functions
		
		-
			Every definition used by the cross compiled code will be cross compiled to a function
			in Javascript. All user defined function take a list of objects as their only
			parameter.
			
			For example:
				
				Define
					
					foo
						Return
							Add
								At: Arguments, 1
								At: Arguments, 2
			
			will be cross compiled to:
				
				function foo(arguments) {
					return arguments[1] + arguments[2];
				}
			
			To return the function, the return command may be used.
			
			For example:
				
				Define: foo
					Return: 3
			
			Will be cross compiled to:
				
				function foo(arguments) {
					return 3;
				}
		-
	
	Math and Logic Operations
		
		-
			Math and logic operations work the same way they normally do in Kaeon FUSION. When
			cross compiled they will be in infix form surrounded by parentheses.
			
			For example:
				
				Add: 1, 2
				Add: 1, Divide: 10, 2
				Greater: 2, 1
			
			Will be cross compiled to:
				
				(1 + 2)
				(1 + (10 / 2))
				(2 > 1)
		-
	
	Flow Control
		
		-
			The scope command will cross compile to a do while loop that will always terminate
			after the first iteration.
			
			The break command will cross compile to a break statement nested within an if
			statement.
			
			The loop command will cross compile to a continue statement nested within an if
			statement.
			
			If the first child of a scope command is a break command, it will cross compile to a
			do while loop that will always terminate after the first iteration, nested inside an if
			statement.
			
			The else command will cross compile to a an else statement.
			
			If the first child of an else command is a break command, it will cross compile to a
			do while loop that will always terminate after the first iteration, nested inside an
			else if statement.
		-
	
	Objects
		
		-
			
			To access the content of an object, an in command with the name of the object as its
			first child nested in a scope command may be used.
			
			To return content from within a scope, the return command may be used.
			
			Using the in command with the argument "Default" will allow the user to use the
			standard commands.

			For example, if the code in the last two examples had already been written, then:
				
				Scope { In: x }
					foo: 50
			
			will cross compile to:
				
				x.foo(50)
				
			and:
			
				Scope { In: x }
					Return: z
			
			will cross compile to:
				
				x.z
				
			and:
			
				Scope { In: Default }
					alert: Hello
			
			will cross compile to:
				
				alert("Hello")
		-
	
	Lists
		
		-
			To define the content of an array inline, the list command may be used.
			
			For example:
				
				List: 1, 2, 3
			
			will be cross compiled to:
				
				{1, 2, 3}
			
			To access an element in an array, the at command may be used. Indexes start at one.
			
			For example:
				
				At: foo, 1
			
			will be cross compiled to:
				
				foo[(1) - 1]
			
			To reset the value of an element in an array, the set command may be used. Indexes
			start at one.
			
			For example:
				
				Set: foo, 1, 5
			
			will be cross compiled to:
				
				foo[(1) - 1] = 5;
				
			To retrieve the size of an array, the size command may be used.
			
			For example:
				
				Size: list
			
			will be cross compiled to:
				
				list.length
		-