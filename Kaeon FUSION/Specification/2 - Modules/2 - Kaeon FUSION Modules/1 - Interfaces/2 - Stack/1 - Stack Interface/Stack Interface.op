Kaeon FUSION Stack Interface

	Philosophy
	
		-
			The Kaeon FUSION Stack Interface provides a standard set of functionality for the
			various call packets provided by the Kaeon FUSION Standard Interface.
		-
		
	Principles
	
		Building and Deriving
		
			Build and Derive Calls
			
				-
					Cross compilation may be triggered through use of build and derive calls sent
					through the standard interface's call command.
				-
		
			Dialects
			
				Cross Dialects
				
					-
						The Kaeon FUSION Stack Interface provides cross dialects analogous to C,
						C++, JavaScript, PHP, Java, Python, C#, and Swift.
					-
					
					Utility Code
					
						-
							If the string "Utility" is passed to a cross dialect provided by the
							stack interface as an argument, the cross compiled code will not
							contain a main function.
						-
					
					Snippet Code
					
						-
							If the string "Snippet" is passed to a cross dialect provided by the
							stack interface as an argument, the cross compiled code will only
							contain the body of the main function.
						-
				
				Miscellaneous Dialects
				
					-
						The Kaeon FUSION Stack Interface provides ONE dialects analogous to XML,
						JSON, SQL, and CSS.
					-
					
					HTML in the XML Dialect
					
						-
							If the XML dialect receives arguments when cross compiling and one of
							them is the string "HTML", it will cross compile with an HTML
							extension, it will use the HTML.op use document automatically, and the
							cross compiled file will have an HTML doctype.
						-
			
			Code Groups
				
				-
					The strings provided as code to be cross compiled will be arranged into groups
					prior to cross compilation, and each group will be assigned a unique index.
					Unless otherwise specified, each provided string will be placed by itself into
					its own group.
				-
			
			Arguments
				
				-
					The string form of the first argument, if said argument returns a non-null
					value and at least one argument is present, specifies the directory the cross
					compiled code should be exported to.
					
					If no arguments are present, or if the first argument returns a null value, the
					code will be exported to the local directory.
					
					The second argument, if present, will be a list. The string form of each
					element in the list, if said element is a non-null value, specifies the name of
					the cross compiled group corresponding to its index. If this argument is
					absent, an element corresponding to a given file returns a null value, or there
					is no element in the list corresponding to a given group, the corresponding
					cross compiled groups will be given default names determined by the dialect in
					use.
					
					Any arguments following the second argument will be specific to the dialect in
					use.
				-
			
			Generated Files
			
				-
					All files generated during cross compilation will be assigned names. They,
					along with their names will each be placed into lists where the name is the
					first element and the file is the second element.
					
					The files will be exported to the file system and the list of file lists will
					be returned to the code that called the cross compilation.
					
					If the arguments passed to the cross compiler contain the string "Return", the
					cross compiled code will not be exported to the file system.
				-
		
		Language Interaction
		
			-
				The stack interface shall provide support for code and module calls sent through
				the standard interface's call command.
				
				The languages supported are C, C++, JavaScript, PHP, Java, Python, C#, and Swift.
			-
		
		Listening
			
			Mouse
			
				-
					A listen packet with a string value of "Mouse" as its second element will
					return a list containing only a null value if the device does not support mice,
					and if the device does support mice will return a list where the first element
					is a number containing the horizontal position of the cursor in pixels where
					the left of the screen has a value of one, the second element is a number
					containing the vertical position of the cursor in pixels where the top of the
					screen has a value of one, the third element is a boolean value representing
					whether the left mouse button is held down, the fourth element is a boolean
					value representing whether the middle mouse button is held down, the fifth
					element is a boolean value representing whether the right mouse button is held
					down, the sixth element is a number representing the current rotation of the
					scroll wheel, and the seventh element is a list containing information of any
					additional mice components for specialized mice.
				-
			
			Keyboard
			
				-
					A listen packet with a string value of "Keyboard" as its second element will
					return a list containing only a null value if the device does not support
					keyboards, and if the device does support keyboards will return a list
					containing the keyboard codes of all keys currently held down.
				-
				
				Keyboard Codes
					
					-
						The keys on a standard keyboard may be referenced for certain stack
						interface commands using string aliases.
					-
					
					Codes
					
						Letters, Numbers, and Symbols
						
							-
								Letter, number, and symbol keys may be referenced by a string code
								containing the character located on the lower shift value, where
								letter case is irrelevant.
							-
						
						Caps Lock
						
							-
								The caps lock command may be referenced by the string "Caps Lock".
								The caps lock key is considered to be held down if caps lock is
								active.
							-
						
						Other Standard Keys
							
							Enter: Enter
							Left Shift: Left Shift
							Right Shift: Right Shift
							Tab: Tab
							Esc: Escape
							Alt: Alternate
							Backspace: Backspace
							Delete: Delete
							Insert: Insert
							Left Arrow Key: Left
							Right Arrow Key: Right
							Up Arrow Key: Up
							Down Arrow Key: Down
						
						System Specific Keys
						
							-
								The codes for system specific keys will vary based on the host
								environment.
							-
			
			Screen
			
				-
					A listen packet with a string value of "Screen" as its second element will
					return a list containing only a null value if the device does not have a
					screen, and if the device does have a screen will return a list where the first
					element is a number containing the width of the screen in pixels, the second
					element is a number containing the height of the screen in pixels, and the
					third element is a null value if the screen is not a touch screen, and if the
					screen is a touch screen is a list of lists, one for each point on the screen
					being touched, where the first element of each sub list is the horizontal
					position of the point of contact in pixels where the left of the screen has a
					value of one, and the second element of each sub list is the vertical position
					of the point of contact in pixels where the top of the screen has a value of
					one.
				-
			
			Motion
			
				-
					A listen packet with a string value of "Motion" as its second element will
					return a list where the first element is null if the device does not detect
					rotation, and if the device does detect rotation will be a list containing
					three numbers representing the device's pitch, yaw, and roll respectively in
					radians, the second element is null if the device does not detect motion, and
					if the device does detect motion will be a list containing three numbers
					representing the device's movement on the x, y, and z axes respectively, the
					third element is null if the device does not have a compass, and if the device
					does have a compass will be a number specifying the rotation of the compass in
					radians, and the fourth element is null if the device does not have a GPS, and
					if the device does have a GPS is a list where the first element is a number
					specifying the device's longitude and the second element is a number specifying
					the device's latitude.
				-
			
			Environment
			
				-
					A listen packet with a string value of "Environment" as its second element will
					return a list containing information on the local temperature, air pressure,
					and lighting if the device provides such information.
				-
			
			Inner Camera
			
				-
					A listen packet with a string value of "Inner Camera" as its second element
					will return a list containing information from the device's inner camera if it
					has one.
				-
			
			Camera
			
				-
					A listen packet with a string value of "Inner Camera" as its second element
					will return a list containing information from the device's outer camera if it
					has one.
				-
			
			Microphone
			
				-
					A listen packet with a string value of "Inner Camera" as its second element
					will return a list containing information from the device's microphone if it
					has one.
				-
		
		Rendering
		
			HTML for GUI and Printing
			
				-
					A render call containing as its second element the string "GUI" and as its
					third element a string containing an HTML document will trigger the stack
					interface to open a GUI and render the HTML document to it, after which a list
					representing the state of the GUI will be returned to the point from which the
					packet was sent. The first element of the list will be a string containing the
					HTML content of the window, the second element will be a number specifying the
					horizontal position of the frame in pixels where the left of the screen has a
					value of one, the second element will be a number specifying the vertical
					position of the frame in pixels where the top of the screen has a value of one,
					the fourth element is the width of the frame in pixels, the fifth element is
					the height of the frame in pixels, the sixth element is a boolean representing
					whether or not the frame is decorated, and the seventh element is a boolean
					representing whether or not the frame is still open.
					
					A render call containing as its second element the string "Print" and as its
					third element a string containing an HTML document will trigger the stack
					interface to render the HTML document to an image and to open a prompt to print
					said image out.
				-
			
			Kaeon ACE
			
				-
					A render call containing the containing as its second element the string value
					"Kaeon ACE" and as its third element a string containing a ONE document in the
					Kaeon ACE format will trigger the stack interface to open an instance of the
					ACE engine and to pass said document to the engine.
				-
			
			Audio
			
				-
					A render call containing the containing as its second element the string
					"Audio" and as its third element a string containing the file path of an audio
					file will trigger the stack interface to play the audio contained in said file
					in a loop, after which a list representing the state of the audio will be
					returned to the point from which the packet was sent. The first element of the
					list will be the string path of the audio, the second element of the list will
					a number specifying the length of the audio in seconds, the third element will
					be a number specifying the current point at which the track is being played
					from in seconds, the fourth element will be a number from zero to one
					specifying the volume of the audio, the fifth element will be a number
					specifying how many times the audio has looped, and the sixth element will be a
					boolean specifying whether the track is currently playing.
				-
			
			3D Printing
			
				-
					A render call containing as its second element the string "3D Print" and as its
					third element a string containing a model file in COLLADA, OBJ, STL, PLY, or
					OFF format will trigger the stack interface to open a prompt to print said
					model out using a 3D printer.
				-
			
			Motor
			
				-
					A render call containing as its second element the string "Motor" and as its
					third element a number representing the power output to the motor will cause a
					motor, if one is present, to spin with the specified amount of force. It will
					return a list for which the first element is a boolean specifying whether the
					motor is still spinning and as its second element a number specifying the
					amount of power being fed to the motor.
				-
			
			Servo
			
				-
					A render call containing as its second element the string "Servo" and as its
					third element either a null value or a number representing the intended
					position of the servo in radians will cause a servo, if one is present, to spin
					to the specified position if the provided value is not null. It will return a
					list a number specifying the current position of the servo in radians.
				-