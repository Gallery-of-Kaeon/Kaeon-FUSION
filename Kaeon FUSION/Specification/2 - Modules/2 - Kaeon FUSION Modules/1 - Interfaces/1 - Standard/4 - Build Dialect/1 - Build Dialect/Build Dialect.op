Build Dialect

	Philosophy
	
		-
			A build dialect is a ONE dialect used to represent another file format.
		-
	
	Principles
		
		Meta Commands
			
			Injection
				
				-
					A meta command may have a child with the content "Injection". Said child will
					have a child with content consisting of literal text. Said text will be
					inserted in place of the meta command at build time.
				-
			
			Use
				
				-
					A meta command may have a child with the content "Use". The use element will
					have at least two children.
					
					One of the use element's children will have the content "Dialect", and will
					have a child containing the name of another build dialect.
					
					One of the use element's children will have the content "Code", and will have
					an indefinite number of children containing code written in the build dialect
					specified by the child of the dialect element.
					
					The use element may optionally have a third child with the content "Arguments",
					which will have an indefinite number of children, the content of which will
					specify arguments for the build dialect specified by the child of the dialect
					element.
					
					The code specified by the children of the code element will be cross compiled
					into another language according to the dialect specified by the child of the
					document element using the arguments specified by the children of the arguments
					element, and the cross compiled code will be inserted in place of the meta
					command at build time.
					
					If the cross compiled code consists of multiple files, only the content of the
					first file returned will be used.
				-
			
			Notation
				
				-
					Notations consist of information that may be placed inside meta commands to
					specify miscellaneous information about the following commands.
					
					To specify notations, a meta command may have a child with the content
					"Notation". Every child of said child will constitute a notation, and may have
					any content and any children.
				-
			
			Nullification
			
				-
					A meta command may have a child with the content "Nullify". The nullify element
					may have any of children.
					
					The effects of preceding meta commands that correspond to the content of the
					nullify element's children will be nullified.
				-
			
			Automatic Mode
			
				-
					If information that would normally be required for certain cross dialect
					commands has not been specified by meta commands, the cross compiler will
					adhere to certain defaults when cross compiling.
					
					However, a meta command may have a child with the content "Automatic", which
					will allow the cross compiler to make assumptions regarding unspecified
					information concerning commands within its scope.
				-