Super Mode
	
	Philosophy
		
		-
			Super Mode is a ONE+ directive that works with the Kaeon FUSION Standard Interface to
			allow for infix notation and to reduce verbosity.
		-
	
	Principles
		
		Activation
			
			-
				Super Mode comes packaged in a directive module with the alias "SUPER". Once the
				module has been imported with a use directive, a directive with the content "SUPER"
				may be used to activate super mode.
			-
		
		Effects
			
			Standard Interface
				
				-
					Super Mode will cause the Kaeon FUSION code it is used on to automatically use
					the standard interface.
				-
			
			Super Tokens
				
				-
					Super tokens are tokens that may be placed within the content of elements. If
					such a token is not surrounded by double quotes, it will be processed.
					
					Certain tokens will take priority in the order they are processed if they occur
					within the same element.
					
					Upon being processed, a token will separate the content that precedes it into a
					left hand value and the content that follows it into a right hand value. Both
					the left hand value and the right hand value will be trimmed of any leading or
					trailing whitespace. If the resulting left hand value has a length of zero, the
					element preceding the element containing the token, or the parent of the
					element containing the token, may serve as the left hand value depending on the
					token. If the resulting right hand value has a length of zero, the element
					following the element containing the token, or the children of the element
					containing the token, in which case there will be multiple right hand values,
					may serve as the right hand value depending on the token.
					
					Once processed into a left hand value, a token, and a right hand value, an
					effect will be applied depending on the token.
				-
				
				Tokens
					
					-
						The tokens recognized by Super Mode are listed below from the highest
						priority to the lowest priority:
						
						Params
						Print
						Log
						Log Line
						Not
						Return
						New
						Define
						Def
						If
						Else
						Elif
						While
						For
						From
						To
						In
						Do
						=
						&
						->
						=>
						|
						@
						And
						Or
						Xor
						>
						>=
						<
						<=
						==
						!=
						++
						+=
						--
						-=
						*
						/
						%
						+
						-
					-
				
				Effects
					
					Function Parameters
					
						-
							The token "params" may be used to specify function parameters if it is
							nested within the child of a define command.
							
							This token will use the children of the command it occurs in as
							alternative right hand values.
							
							The content of each of the token's right hand values shall become an
							alias of a parameter for the function corresponding to the order of
							said right hand values.
						-
					
					Implicit Prefix Notation
					
						-
							Certain tokens may be used in place of certain commands where their
							right hand values will serve as arguments.
							
							These tokens will use the children of the command they occur in as
							alternative right hand values.
							
							The log, log line, define, else, not, new, and return commands may all
							be used in the form of such a token as opposed to a command. The token
							"print" may be used in place of "log line", and the token "def" may be
							used in place of "define".
						-
					
					Conditionals and Loops
						
						-
							The following tokens will use the children of the command they occur in
							as alternative right hand values.
							
							The token "If" with a right hand value in the form of a value that
							returns a boolean followed by the token "Do" translates to a
							conditional where its children, not including said boolean, are
							processed if said boolean is true.
							
							The token "Elif" with a right hand value in the form of a value that
							returns a boolean followed by the token "Do" translates to a
							conditional where its children, not including said boolean, are
							processed if said boolean is true and the previous conditional failed
							to activate.
							
							The token "While" with a right hand value in the form of a value that
							returns a boolean followed by the token "Do" translates to a loop where
							its children, not including said boolean, are processed until said
							boolean is false.
							
							The token "For" with a right hand value in the form of a value that
							returns a number followed by the token "Do" translates to a loop where
							its children, not including said boolean, are processed for the number
							of times returned by said number.
							
							The token "For" with a right hand value in the form of a miscellaneous
							string, followed by the token "In", followed by a value that returns a
							list, followed by the token "Do", translates to a loop where its
							children, not including said right hand value, are processed once for
							every element in the returned list and the miscellaneous string serves
							as the alias for the element in the list at the index corresponding to
							the current iteration.
							
							The token "For" with a right hand value in the form of a miscellaneous
							string, followed by the token "From", followed by a value that returns
							a number, followed by the token "To", followed by another value that
							returns a number, followed by the token "Do", translates to a loop
							where its children, not including said right hand value, are processed
							once for every number between the two returned numbers, inclusive, and
							the miscellaneous string serves as the alias for the number
							corresponding to the current iteration.
						-
					
					Infix Operators
						
						-
							An infix operator token will take its left hand value and its right
							hand values, and make them the children of the command containing it,
							with the left hand value preceding the right hand values. The token
							will then be replaced with a standard interface command.
							
							These tokens will use the siblings of the command they occur in as
							alternative left hand values and right hand values.
							
							The tokens recognized as infix operators are listed below along with
							their respective standard interface commands:
							
							&: Concatenate
							@: At
							And: And
							Or: Or
							Xor: Exclusive Or
							>: Greater
							>=: Greater or Equal
							<: Less
							<=: Less or Equal
							==: Equal
							!=: Not: Equal
							*: Multiply
							/: Divide
							%: Modulus
							+: Add
							-: Subtract
						-
					
					Postfix Operators
						
						-
							The token "--" indicates the presence of a command that deprecates its
							left hand value by one.
							
							The token "++" indicates the presence of a command that increments its
							left hand value by one.
							
							The token "-=" indicates the presence of a command that deprecates its
							left hand value by its right hand value.
							
							The token "++" indicates the presence of a command that increments its
							left hand value by its right hand value.
						-
					
					Special Operators
					
						-
							The token "=" translates to a command that assigns the right hand value
							to a variable with an alias match its left hand value.
							
							The token "->" translates to a command that performs the function
							specified by its right hand value within the object specified by its
							left hand value.
							
							The token "=>" translates to a command that returns the variable
							specified by its right hand value from within the object specified by
							its left hand value.
							
							The token "|" translates to performing the command specified by its
							left hand value with its right hand value as its first argument and the
							children of the command containing it as additional arguments.
						-