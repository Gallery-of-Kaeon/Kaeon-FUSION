ONE+
	
	Purpose
		
		-
			ONE+ is intended to serve as a general purpose wrapper module for ONE.
			
			As mentioned in the ONE specification, ONE does not provide syntactic sugar of any
			kind. This is to make the language deterministic, that is to say that its syntax and
			its semantics are 1 to 1.
			
			However, it can be cumbersome to write by hand, so the solution is that hand written
			ONE code can be pre-processed by separate modules before being parsed as ONE.
		-
	
	Syntax and Structure
		
		-
			ONE+ shares the exact same structure as ONE, and any code that is valid in ONE is valid
			in ONE+.
			
			However, ONE+ provides various mnemonics that can be reformatted into ONE code.
		-
		
		Syntax
		
			Indentation
				
				-
					ONE+ allows users the option of either tabs or n spaces for indentation. The
					only rule regarding indentation is that it must be consistent throughout the
					file.
				-
		
			Whitespace
				
				-
					Any whitespace that lies outside an element definition will be cropped before
					parsing.
					
					For example:
					
						-
							Example
						-
						
						-
							Example
							
							Example
						-
					
					Will be pre-processed into:
						
						-
							Example
						-
						-
							Example
							
							Example
						-
				-
						
			Element Definitions
			
				-
					Provided the element's content contains only a single line and no leading or
					trailing whitespace, said content simply be written as raw text.
				
					For Example:
						
						Example
							
							Parent
								
								Child
								Second Child
								
							Second Parent
								
								Child
									Second Order Child
									
								Second Child
									Second Order Child
									
					Will be pre-processed to:
					
						-
							Example
						-
							-
								Parent
							-
								-
									Chlld
								-
								-
									Second Child
								-
							-
								Second Parent
							-
								-
									Chlld
								-
									-
										Second Order Child
									-
								-
									Second Child
								-
									-
										Second Order Child
									-
				-
			
				Multiple Element Lines
				
					-
						For the purpose of reducing verbosity, multiple element definitions may be
						stored on a single line.
						
						The various element definitions are separated into modules, and there is a
						unique syntax for doing this.
						
						If you wish to place multiple elements on a single line, you can separate
						them with '|'s or with ','s.
						
						For example:
						
							one | two | three
						
						And:
						
							one, two, three
						
						Will both be pre-processed to:
							
							-
								one
							-
							-
								two
							-
							-
								three
							-
							
						If you want to nest elements within each other, you can dictate this using
						':'s.
						
						For example:
							
							one | two: three | four: five
						
						Will be pre-processed to:
						
							-
								one
							-
							-
								two
							-
								-
									three
								-
								-
									four
								-
									-
										five
									-
						
						If you want the nesting of the elements to branch, you can use parentheses
						or curly braces to dictate scope. If you use curly braces, the elements
						within them will be nested inside the preceding element.
						
						For example:
						
							one {two: three} (four: five) six | seven
						
						Will be pre-processed to:
						
							-
								one
							-
								-
									two
								-
									-
										three
									-
							-
								four
							-
								-
									five
								-
							-
								six
							-
							-
								seven
							-
							
						Child elements nested inside curly braces will be treated as any other
						child element, though may also be manipulated by directives.
							
						In addition, you may use ';'s to reverse the nest level.
						
						For example:
						
							one: two; three: four
						
						Will be pre-processed to:
						
							-
								one
							-
								-
									two
								-
							-
								three
							-
								-
									four
								-
						
						
						Any elements nested underneath a multiple element definition will be nested
						based on the nest level at the end of the line.
						
						For example:
						
							one: two: three
								four
						
						Will be pre-processed to:
							
							-
								one
							-
								-
									two
								-
									-
										three
									-
										-
											four
										-
						
						And:
						
							one {two: three}
								four
						
						Will be pre-processed to:
							
							-
								one
							-
								-
									two
								-
									-
										three
									-
								-
									four
								-
					-
					
				Escape Sequences
				
					-
						The rules for multiple element definitions establish certain characters
						that may not be used as literal text.
						
						Thus, their effects must be nullified using an escape sequence.
						
						An escape sequence is dictated by a '~' followed by the operating
						character. In addition, a new line may be dictated using "~n". If you wish
						to represent a literal '~' in a multiple element definition, use two '~' in
						a row.
						
						For example:
						
							one: two~: three
						
						Will be pre-processed to:
							
							-
								one
							-
								-
									two: three
								-
								
						And:
						
							one: two~~: three
						
						Will be pre-processed to:
							
							-
								one
							-
								-
									two~
								-
									-
										three
									-
								
						And:
						
							one: two~~~:~nthree
						
						Will be pre-processed to:
							
							-
								one
							-
								-
									two~:
									three
								-
						
						Additionally, you may encase sections of a multiple element line in single
						quotes.
						
						For example:
						
							'one: two | three'
						
						Will be pre-processed to:
						
							-
								one: two | three
							-
						
						Double quotes may be used in the same way, but the won't disappear after the
						escape sequence has been processed.
						
						For example:
						
							"one: two | three"
						
						Will be pre-processed to:
						
							-
								"one: two | three"
							-
					-
			
			Comments
				
				-
					A line in ONE+ may be commented out using '#'. And additionally, you can open
					comments using '#[', and close them using ']#'.
					
					For example:
						
						# this will not be read
						this will be read # but not this
						this will be read #[ but this will not ]# but this will
						this will be read #[ this will not be
						neither will this ]# but this will be
						and so will this
				-
			
			Directives
				
				-
					Directives are scripts given to the ONE+ parser. They are written as multiple
					element line surrounded by square brackets.
					
					For example:
						
						[DIRECTIVE: ARGUMENT 1, ARGUMENT 2]
					
					The directive itself and any of its children will be removed from the file, and
					the rest of the file will be affected based on the content of the directive.
					
					ONE+ parser implementations vary in the directives they support.
				-