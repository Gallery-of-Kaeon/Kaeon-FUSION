Standard ONE+ Directives
	
	Overview
		
		-
			The ONE+ directives listed in this document are generally regarded as standard.
		-
	
	Directive Reference
	
		IMPORT
		
			-
				This directive identifies another ONE+ file from which to import definitions and
				declarations.
				
				For example:
					
					[ IMPORT: path/directory/data.op ]
			-
	
		DECLARE
		
			-
				This directive declares a property to be applied to the element in which it is
				nested.
			-
			
				SCHEMA
				
					-
						The SCHEMA directive will cause any element sharing the specified content
						to import everything defined within the declaration.
						
						For example:
							
							[ DECLARE: SCHEMA: body ]
								
								[ DECLARE: PROPERTIES: attributes ]
								
								[ DECLARE: INFIX: + ]
								[ DECLARE: INFIX: - ]
							
							body
								
								text { size: 5 }
								
								1 + 2
								3 + 4
							
							body
								
								image { source: my file.jpg }
								
								4 - 3
								2 - 1
						
						Will be pre processed to:
							
							-
								body
							-
								-
									text
								-
									-
										attributes
									-
										-
											size
										-
											-
												5
											-
								-
									1
								-
								-
									+
								-
								-
									2
								-
								-
									3
								-
								-
									+
								-
								-
									4
								-
							-
								body
							-
								-
									image
								-
									-
										attributes
									-
										-
											source
										-
											-
												my file.jpg
											-
								-
									4
								-
								-
									-
								-
								-
									3
								-
								-
									2
								-
								-
									-
								-
								-
									1
								-
					-
			
				PROPERTIES
				
					-
						The PROPERTIES declaration will cause any element defined in parentheses to
						be nested inside another element if it is a child of an element with a
						given name.
						
						For example:
							
							[ DECLARE: PROPERTIES { if: condition } ]
							
							if { a > b }
								print: "Hello, world!"
						
						Will be pre-processed to:
							
							-
								if
							-
								-
									condition
								-
									-
										a > b
									-
								-
									print
								-
									-
										"Hello, world!"
									-
					-
				
				ESCAPE
					
					-
						The escape declaration allows you to define escape sequences over which
						other declarations will have no effect.
						
						For example:
							
							[ INFIX: > ]
							[ INFIX: = ]
							[ ESCAPE: " | " ]
							
							a > b
							"a > b"
							"a > b" = true
						
						Will be pre processed to:
							
							-
								a
							-
							-
								>
							-
							-
								b
							-
							-
								"a > b"
							-
							-
								"a > b"
							-
							-
								=
							-
							-
								true
							-
					-
				
				INFIX
					
					-
						The INFIX declaration will take the strings on either side of the specified
						operator and put them in an infix structure.
						
						For example:
							
							[ INFIX: > ]
							
							5 > 3
						
						Will be pre processed to:
							
							-
								5
							-
							-
								>
							-
							-
								3
							-
						
						And:
							
							[ INFIX: and ]
							[ INFIX: > ]
							[ INFIX: < ]
							
							5 > 3
							3 < 5
							1 < 3 and 1 < 2 and 3 > 2
						
						Will be pre processed to:
							
							-
								5
							-
							-
								>
							-
							-
								3
							-
							-
								3
							-
							-
								<
							-
							-
								5
							-
							-
								and
							-
							-
								<
							-
							-
								1
							-
							-
								3
							-
							-
								1
							-
							-
								<
							-
							-
								2
							-
							-
								and
							-
							-
								3
							-
							-
								>
							-
							-
								2
							-
						
						And:
							
							[ INFIX: and ]
							[ INFIX: or ]
							[ INFIX: > ]
							[ INFIX: < ]
							
							1 < 3 and ((1 < 2 and 3 > 2) or 4 < 5)
						
						Will be pre processed to:
						
							-
								1
							-
							-
								<
							-
							-
								3
							-
							-
								and
							-
							-
								1
							-
							-
								<
							-
							-
								2
							-
							-
								and
							-
							-
								3
							-
							-
								>
							-
							-
								2
							-
							-
								or
							-
							-
								4
							-
							-
								<
							-
							-
								5
							-
					-
				
				PREFIX
					
					-
						The PREFIX declaration will take an infix operator and turn the operation
						into a prefix operation.
						
						For example:
							
							[ PREFIX: > ]
							
							5 > 3
						
						Will be pre processed to:
							
							-
								>
							-
								-
									5
								-
								-
									3
								-
					-
		
		DEFINE
			
			-
				This directive specifies a section of ONE that may be reused throughout the file.
				
				The directive takes one argument that will serve as the name.
				
				For example:
					
					[ DEFINE: foo ]
					
						bar: baz
						barbaz
				
				In addition, a USE directive may be called from within a define directive to
				reference an argument passed through the call by index.
				
				For example:
					
					[ DEFINE: foo ]
					
						[ ARG: 1 ]: [ ARG: 2 ]
						[ ARG: 3: 1 ]
					
					[ USE: foo: foo | bar | baz: barbaz ]
				
				The ONE defined within the directive can also serve as a list in a FOR directive.
			-
			
		USE
			
			-
				This directive invokes a previously defined definition in another location.
				
				If used inside a DEFINE directive, it can call an argument passed to the DEFINE
				directive by index.
				
				For example:
					
					[ DEFINE: foo ]
						
						bar
							[ ARG: 1 ] | [ ARG: 1: 1 ] | [ ARG: 2 ]
							
						baz
					
					[ USE: foo: (bar: baz) barbaz ]
					[ USE: foo: (x: y) z ]
				
				Will be pre-processed to:
					
					-
						bar
					-
						-
							bar
						-
							-
								baz
							-
						-
							barbaz
						-
					-
						baz
					-
					-
						bar
					-
						-
							x
						-
							-
								y
							-
						-
							z
						-
					-
						baz
					-
				
				In addition, you may also specify an index if you only want a single element from
				the definition.
				
				For example:
					
					[ DEFINE: foo ]
						
						foo | bar | baz
					
					[ USE: foo | 1 ]
					[ USE: foo | 3 ]
				
				Will be pre-processed to:
					
					-
						foo
					-
					-
						baz
					-
			-
		
		IF
			
			-
				This directive specifies a section of ONE code to be placed into a file based on
				external conditions.
			-
			
			Subdirectives
				
				FILE
				
					-
						Validates whether the document name contains a specified string.
						
						For Example:
							
							[ IF: FILE: .html ]
							
								foo
								bar
					-
				
				OS
					
					-
						Validates whether the operating system name contains a specified string.
						
						For Example:
							
							[ IF: OS: windows ]
							
								foo
								bar
					-
		
		FOR
			
			-
				This directive will repeat a section of ONE either n times or for every element in
				a list.
				
				Takes an argument of either a number or a USE directive. If a number is given a
				number as the argument, the section will be repeated the specified number of times.
				If a use directive is given it will be pasted once for every element in the list.
				Should this option be used, the element of the list for the current iteration of
				the loop can be pasted in with a USE directive that takes '*' as an argument.
				
				For example:
					
					[ FOR: 3 ]
					
						foo
						bar
					
				Will be pre-processed to:
					
					-
						foo
					-
					-
						bar
					-
					-
						foo
					-
					-
						bar
					-
					-
						foo
					-
					-
						bar
					-
				
				and
					
					[ DEFINE: list ]
					
						foo
						bar
						baz
					
					[ FOR: list ]
						print: [ INDEX ]
				
				will be pre procecessed to:
					
					-
						print
					-
						-
							foo
						-
					-
						print
					-
						-
							bar
						-
					-
						print
					-
						-
							baz
						-
				
				FOR directives may also be nested.
				
				For example:
					
					[ DEFINE: list ]
					
						foo: foo | bar | baz
						bar: foo | bar | baz
						baz: foo | bar | baz
					
					[ FOR: size { list } ]
					
						[ FOR: list ]
							[ INDEX { nest: 1 } ]: [ INDEX ]
				
				will be pre processed to:
					
					-
						1
					-
						-
							foo
						-
						-
							bar
						-
						-
							baz
						-
					-
						2
					-
						-
							foo
						-
						-
							bar
						-
						-
							baz
						-
					-
						3
					-
						-
							foo
						-
						-
							bar
						-
						-
							baz
						-
				
				Lastly, if a FOR directive is given a list as an argument, it may also be given
				bounds.
				
				For example:
					
					[ DEFINE: list ]
					
						foo | bar | baz
					
					[ FOR: list | RANGE { 2 | 3 } ]
					
						print [INDEX]
				
				will be pre processed to:
					
					-
						print
					-
						-
							bar
						-
					-
						print
					-
						-
							baz
						-
				
				and:
					
					[ DEFINE: list ]
					
						foo | bar | baz | abc | 123
					
					[ FOR: list | RANGE { 1 | -3 } ]
					
						print: [INDEX]
				
				will be pre processed to:
					
					-
						print
					-
						-
							foo
						-
					-
						print
					-
						-
							bar
						-
					-
						print
					-
						-
							baz
						-
				
				and:
					
					[ DEFINE: list ]
					
						foo | bar | baz | abc | 123
					
					[ FOR: list | RANGE { -1 | 1 } ]
					
						print: [INDEX]
				
				will be pre processed to:
					
					-
						print
					-
						-
							123
						-
					-
						print
					-
						-
							abc
						-
					-
						print
					-
						-
							baz
						-
					-
						print
					-
						-
							bar
						-
					-
						print
					-
						-
							foo
						-
			-
		
		INFO
			
			-
				This directive specifies documentation that may be referenced by an IDE.
				
				Example:
					
					[ INFO { Author: Kaeon } ]
					[ INFO: This function performs an operation ]
					
					function: foo
						return: bar { baz { 5 } }
			-